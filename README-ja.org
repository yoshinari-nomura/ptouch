#+TITLE: ptouch -- CLI for Brother P-Touch Label Writers
#+AUTHOR: Yoshinari Nomura
#+EMAIL: nom@quickhack.net
#+DATE: 2025-09-01
#+OPTIONS: H:3 num:nil toc:nil
#+OPTIONS: ^:nil \n:nil ::t |:t f:t tex:t
#+OPTIONS: d:nil tags:t
#+OPTIONS: author:t email:nil creator:nil
#+OPTIONS: timestamp:nil timestamps:nil
#+LANGUAGE: ja

* ptouch とは?
  ptouch は Rust で書かれた brother P-TOUCH ラベルライタ印刷 CLI ツールで，以下の特徴を持っています．

  最新版は以下で公開しています:
  https://github.com/yoshinari-nomura/ptouch

  + QR コードを含むテープイメージの作成
    + QR コードは SVG の path によるので拡縮しても潰れない
  + テープイメージの PNG/SVG 出力に対応
    + SVG をエディタで調整したいことあるよね
  + 回転，段組，自動スケール等の柔軟な配置調整
  + USB/TCP の両接続に対応
  + カットなし連続出力に対応
    + テープを無駄にしたくないよね

  Linux で動作を確認していますが，おそらく macOS や Windows でもビルドできると思います．

* 印刷対応機種
  | 機種名    | 対応状況  | USB vid:pid | コメント             |
  |-----------+-----------+-------------+----------------------|
  | PT-P900W  | Confirmed | 04f9:2085   | Wi-Fi/USB 動作確認済 |
  | PT-P900   | Maybe     | 04f9:2083   |                      |
  | PT-P950NW | Maybe     | 04f9:2086   |                      |
  | PT-2430PC | Confirmed | 04f9:202d   | 180DPI               |

  + PT-2430PC (USB 専用機) は，PT-P900 シリーズと同じ USB のコマンド体
    系を持っていますが，他機種が 360DPI に対して 180DPI です．
    =-r 180= オプションを付けてイメージを作成してください．

* Usage
  + ptouch -h
    #+begin_example
      Usage: ptouch <COMMAND>
      Commands:
        image       Create label image for Brother P-Touch
        print       Send raster image to P-Touch (TCP/USB)
        status      Get status information from P-Touch
        completion  Generate shell completion scripts
    #+end_example

  + ptouch image -h (詳細は --help)
    #+begin_example
      Usage: ptouch image [OPTIONS] [TEXT]...
      - Create label image for Brother P-Touch

      Arguments:
        [TEXT]...  Text lines to print [default: stdin]

      Options:
        -a, --auto-scale                 Auto scale contents to the tape width
        -d, --debug                      Show alignment marks for debug
        -f, --font <FONT>                Font name [default: "Noto Sans CJK JP"]
        -F, --font-path <FONT_PATH>      Additional font path
        -l, --line-height <LINE_HEIGHT>  Line height in pixels [default: font-size]
        -o, --output <OUTPUT>            Output to file [default: stdout]
        -p, --placement <PLACEMENT>      Place contents [default: top]
        -r, --resolution <RESOLUTION>    Printer resolution in DPI [default: 360]
        -R, --rotate                     Rotate image by 90 degrees
        -s, --font-size <FONT_SIZE>      Font size in pixels [default: 24]
        -t, --tape-name <TAPE_NAME>      Tape size in mm [default: 12]
        -S, --source                     Output SVG source instead of PNG
        -h, --help                       Print help (see more with '--help')
    #+end_example

  + ptouch print -h (詳細は --help)
    #+begin_example
      Usage: ptouch print [OPTIONS] --host <HOST> [PNG_FILE]
      - Send raster image to P-Touch

      Arguments:
        [PNG_FILE]  PNG file to print [default: stdin]

      Options:
        -H, --host <HOST>  Printer host: hostname.local (network) or vid:pid (USB)
                           Examples: ptouch.local, 192.168.1.100, 04f9:2085
        -c, --continuous   Enable continuous printing (no cutting)
        -h, --help         Print help
    #+end_example

  + ptouch status -h (詳細は --help)
    #+begin_example
      Usage: ptouch status [OPTIONS] --host <HOST>
      - Get status information from P-Touch

      Options:
        -H, --host <HOST>  Printer host: hostname.local (network) or vid:pid (USB)
                           Examples: ptouch.local, 192.168.1.100, 04f9:2085
        -v, --verbose      Show verbose information
        -h, --help         Print help
    #+end_example

    + Network による status は，P-Touch に SNMP (UDP 161) でアクセスします．P-Touch の SNMP を無効にしないでください．

* ptouch image コマンドの書式と出力例
** 基本的な書式
   + ptouch image "element1" "element2" "element3" ... のような形式でテープイメージを作成します．
   + 各引数 (標準入力の場合は各行) を element として扱い，連続する element は，縦にレイアウトされます
     #+begin_src bash :results silent
       ptouch image -s 70 -p center -o images/vertical.png "Hello" "World"
     #+end_src
     #+ATTR_HTML: :height 85px
     [[file:images/vertical.png]]

   + =+= で区切ると水平方向にレイアウトされます (ROW を作成)
     #+begin_src bash :results silent
       ptouch image -s 50 -p center -o images/horizontal.png "qrc:Hello World" + "Hello" "World"
     #+end_src
     #+ATTR_HTML: :height 85px
     [[file:images/horizontal.png]]

   + =/= で区切ると新しいレイヤ (オーバレイ) を生成します．
     + 全レイヤは同じ位置で順番に積み上がって描画されます．
     + 背景，枠線，複合デザインの作成に便利です．
     #+begin_src bash :results silent
       ptouch image -s 50 -p center -o images/overlay.png "□□□" / "△△△"
     #+end_src
     #+ATTR_HTML: :height 85px
     [[file:images/overlay.png]]

   + =[= と =]= で囲むと 1つの element としてグループ化します．
     #+begin_src bash :results silent
       ptouch image -s 45 -p center -o images/complex.png Hello [ "qrc:Hello World" + "World" ]
     #+end_src
     #+ATTR_HTML: :height 85px
     [[file:images/complex.png]]

** Element の種類
   Element は，以下のプレフィクスを付けた文字列です．
   + =txt:= プレフィックス (txt: は省略可): テキスト要素
   + =qrc:= プレフィックス: QR コード要素
   + =gap:= プレフィックス: 空白要素 (レイアウト調整用)
   + =box:= プレフィックス: Gap の可視版 (黒線作成用)
   + =bar:= プレフィックス: バーコード要素 (未実装)
   + =img:= プレフィックス: 画像要素 (未実装)
   + =fnt:= プレフィックス: フォント操作要素

   空白要素 (gap) は，要素間の間隔を細かく調整するために使用できます:
   + =gap:10= : 10x10 の正方形の空白
   + =gap:20x5= : 幅20，高さ5の矩形空白

   =fnt:= プレフィックスは動的なフォント変更を可能にします．
   視覚的表現を持たず，後続のテキスト要素にのみ影響します．
   フォント指定形式:
   + =fnt:NAME:WEIGHT:SIZE:HEIGHT= : フォント名，ウェイト，サイズ，行の高さを設定．
     各部分は空白にできます．
   + =fnt:default= : デフォルトのフォント設定にリセット
   + =fnt:pop= : 前のフォント設定に復元 (フォントスタックから)

** レイアウト例
*** 基本的なテキスト配置 (top, bottom, center, auto-scale)
    + 以下の例では，印刷不能領域とバウンディングボックスを可視化するために =-d= オプションを付けています．
      実際の印刷用のイメージは， =-d= を除いて作成する必要があります．
    + テープ幅とフォントサイズは，デフォルトの 12mm (-t 12)と 24px (-f 24) です．
    + 各オプションのデフォルト値は =ptouch image --help= で確認できます．

    + top
      #+begin_src bash :results silent
        ptouch image -d -s 70 -o images/hello-t.png "Hello - Top"
      #+end_src
      #+ATTR_HTML: :height 85px
      [[file:images/hello-t.png]]

    + bottom
      #+begin_src bash :results silent
        ptouch image -d -p bottom -s 70 -o images/hello-b.png "Hello - Bottom"
      #+end_src
      #+ATTR_HTML: :height 85px
      [[file:images/hello-b.png]]

    + center
      #+begin_src bash :results silent
        ptouch image -d -p center -s 70 -o images/hello-c.png "Hello - Center"
      #+end_src
      #+ATTR_HTML: :height 85px
      [[file:images/hello-c.png]]

    + auto-scale: テープ幅一杯に自動で拡大/縮小する
      #+begin_src bash :results silent
        ptouch image -d -a -o images/hello-a.png "Hello - Scaled"
      #+end_src
      #+ATTR_HTML: :height 85px
      [[file:images/hello-a.png]]

*** 幅広テープを利用した回転配置
    + =-R= で 90度回転し， =-a= でテープ幅一杯に配置しています．
    #+begin_src bash :results silent
      ptouch image -d -a -R -p center -s 50 -o images/qr-hello-world-a-r.png \
        "qrc:Hello World" + "Hello World"
    #+end_src
    #+ATTR_HTML: :height 255px
    [[file:images/qr-hello-world-a-r.png]]

*** PCBコネクタの例
    コネクタのピッチ (0.1 インチ) に改行幅を設定 (=-l= 36) しています．
    #+begin_src bash :results silent
      ptouch image -d -R -p bottom -l 36 -o images/pcb-connector-r.png \
        "+5V" "SIN" "GND" "SBUSY" "SCK" "RESET"
    #+end_src

    #+ATTR_HTML: :height 85px
    [[file:images/pcb-connector-r.png]]

* インストール方法
  #+begin_src bash
    git clone https://github.com/yoshinari-nomura/ptouch.git
    cd ptouch
    cargo build --release
    cp -p ./target/release/ptouch ~/bin
  #+end_src

* 参考資料
  + ラスタコマンドリファレンス PT-P900/P900W/P950NW
    + 英語版: https://download.brother.com/welcome/docp100407/cv_ptp900_eng_raster_102.pdf
    + 日本語版: https://download.brother.com/welcome/docp100407/cv_ptp900_jpn_raster_102.pdf

* 同様のツール
  + [[https://github.com/masatomizuta/py-brotherlabel][py-brotherlabel: Raster print package for Brother P-Touch label printers]]
  + [[https://github.com/HenrikBengtsson/brother-ptouch-label-printer-on-linux][HenrikBengtsson/brother-ptouch-label-printer-on-linux: How to print to a Brother P-touch (PT) label printer on Linux]]
